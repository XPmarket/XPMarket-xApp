{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:testing-library/react",
    "prettier",
    "next"
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "prettier",
    "react-hooks",
    "simple-import-sort",
    "testing-library"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "no-console": "error",
    "no-restricted-imports": ["error", "react-i18next"],
    "simple-import-sort/exports": "error",
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Node.js builtins. You could also generate this regex if you use a `.js` config.
          // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
          [
            "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
          ],
          // Packages. `react` related packages come first then side effect imports nad global packages
          ["^react.*", "^\\u0000", "^[^@.]+.*$"],
          // Internal packages.
          [
            "^@?\\w",
            "^(@|@company|@ui|components|utils|config|vendored-lib)(/.*|$)"
          ],
          // Parent imports. Put `..` last.
          // Other relative imports. Put same-folder imports and `.` last.
          // Style imports.
          [
            "^\\.\\.(?!/?$)",
            "^\\.\\./?$",
            "^\\./(?=.*/)(?!/?$)",
            "^\\.(?!/?$)",
            "^\\./?$",
            "^.+\\.s?css$"
          ]
        ]
      }
    ]
  },
  "globals": {
    "React": "writable"
  },
  "ignorePatterns": ["public/static"]
}
